name: Fetch Strings from Google Sheets

on:
  workflow_dispatch:
    inputs:
      sheet_id:
        description: 'Enter the Google Sheet ID'
        required: true

jobs:
  fetch_strings:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install gspread oauth2client jq

      - name: Create fetch_strings.sh script
        run: |
          cat << 'EOF' > fetch_strings.sh
          #!/bin/bash

          # Fetch strings from Google Sheets and generate strings.xml files

          # Check for required environment variable
          if [ -z "$GOOGLE_SHEET_CREDENTIALS" ]; then
              echo "Error: GOOGLE_SHEET_CREDENTIALS is not set."
              exit 1
          fi

          # Check for required argument
          if [ "$#" -ne 1 ]; then
              echo "Usage: $0 <sheet_id>"
              exit 1
          fi

          SHEET_ID=$1
          VALUES_DIR="./resources"

          # Create output directory if it does not exist
          mkdir -p "$VALUES_DIR"

          # Fetch data from Google Sheets using Python
          DATA=$(python - <<END
          import os
          import json
          import gspread
          from oauth2client.service_account import ServiceAccountCredentials

          # Use credentials and authenticate
          scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']

          # Load the credentials from the environment variable
          creds_json = os.getenv('GOOGLE_SHEET_CREDENTIALS')
          creds_data = json.loads(creds_json)
          creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_data, scope)

          client = gspread.authorize(creds)

          # Open the spreadsheet by ID and fetch the first worksheet
          sheet = client.open_by_key("$SHEET_ID")
          worksheet = sheet.get_worksheet(0)  # Get the first worksheet

          # Fetch all records from the worksheet
          data = worksheet.get_all_records()
          print(json.dumps(data))
          END
          )

          # Check for JSON parsing errors
          if [ $? -ne 0 ]; then
              echo "Error fetching data from Google Sheets."
              exit 1
          fi

          # Generate strings.xml for each language column
          echo "$DATA" | jq -c '.[]' | while IFS= read -r row; do
              # Extract language translations
              declare -A translations
              quantity=$(echo "$row" | jq -r '.Quantity')

              # Loop through all keys in the row
              for lang in $(echo "$row" | jq -r 'keys_unsorted[] | select(. != "ID" and . != "Type" and . != "Quantity")'); do
                  translations[$lang]=$(echo "$row" | jq -r ".\"$lang\"")
              done

              # Generate strings.xml files for each language
              for lang in "${!translations[@]}"; do
                  lang_dir="$VALUES_DIR/values-${lang}"
                  mkdir -p "$lang_dir"
                  xml_file="$lang_dir/strings.xml"

                  # Start writing the XML
                  {
                      echo '<?xml version="1.0" encoding="utf-8"?>'
                      echo '<resources>'

                      for id in $(echo "$row" | jq -r '.ID'); do
                          translation=${translations[$lang]}
                          echo "    <string name=\"$id\">$translation</string>"
                      done

                      echo '</resources>'
                  } > "$xml_file"

                  echo "strings.xml generated and saved to $xml_file"
              done
          done
          EOF

      - name: Make fetch_strings.sh executable
        run: chmod +x fetch_strings.sh

      - name: Run fetch_strings.sh
        run: ./fetch_strings.sh ${{ github.event.inputs.sheet_id }}

      - name: Configure Git
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"

      - name: Commit and push changes
        run: |
          git add resources/
          git commit -m "Add generated strings.xml files from Google Sheets"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
