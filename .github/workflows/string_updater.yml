name: Fetch Strings from Google Sheets

on:
  workflow_dispatch:
    inputs:
      sheet_id:
        description: 'Enter the Google Sheet ID'
        required: true

jobs:
  fetch_strings:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          pip install gspread oauth2client jq

      - name: Fetch strings and generate XML
        run: |
          #!/bin/bash
          
          # Fetch strings from Google Sheets and generate strings.xml files

          # Check for required environment variable
          if [ -z "$CREDENTIALS" ]; then
              echo "Error: CREDENTIALS is not set."
              exit 1
          fi

          # Use the provided Google Sheet ID
          SHEET_ID=${{ github.event.inputs.sheet_id }}
          VALUES_DIR="./resources"

          # Create output directory if it does not exist
          mkdir -p "$VALUES_DIR"

          # Fetch data from Google Sheets using Python
          DATA=$(python - <<END
          import os
          import json
          import gspread
          from oauth2client.service_account import ServiceAccountCredentials

          # Use credentials and authenticate
          scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']

          # Load the credentials from the environment variable
          creds_json = os.getenv('CREDENTIALS')
          creds_data = json.loads(creds_json)
          creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_data, scope)

          client = gspread.authorize(creds)

          # Open the spreadsheet by ID and fetch the first worksheet
          sheet = client.open_by_key("$SHEET_ID")
          worksheet = sheet.get_worksheet(0)  # Get the first worksheet

          # Fetch all records from the worksheet
          data = worksheet.get_all_records()
          print(json.dumps(data))
          END
          )

          # Check for JSON parsing errors
          if [ $? -ne 0 ]; then
              echo "Error fetching data from Google Sheets."
              exit 1
          fi

          # Create an associative array for translations
          declare -A translations

          # Generate strings.xml entries for each row
          echo "$DATA" | jq -c '.[]' | while IFS= read -r row; do
              # Extract the row's ID
              id=$(echo "$row" | jq -r '.ID')

              # Loop through all language keys except for ID, Type, and Quantity
              for lang in $(echo "$row" | jq -r 'keys_unsorted[] | select(. != "ID" and . != "Type" and . != "Quantity")'); do
                  translation=$(echo "$row" | jq -r ".\"$lang\"")
                  translations[$lang]+="    <string name=\"$id\">$translation</string>\n"
              done
          done

          # Create a single strings.xml file for all languages
          for lang in "${!translations[@]}"; do
              lang_dir="$VALUES_DIR/values-${lang}"
              mkdir -p "$lang_dir"
              xml_file="$lang_dir/strings.xml"

              # Create a temporary XML file to compare
              tmp_file=$(mktemp)
              {
                  echo '<?xml version="1.0" encoding="utf-8"?>'
                  echo '<resources>'
                  echo -e "${translations[$lang]}"
                  echo '</resources>'
              } > "$tmp_file"

              # Check if the new XML is different from the existing one
              if ! diff -q "$tmp_file" "$xml_file" > /dev/null; then
                  echo "Changes detected in $xml_file"
                  mv "$tmp_file" "$xml_file"  # Move temp file to actual file
              else
                  echo "No changes in $xml_file"
                  rm "$tmp_file"  # Remove temp file if no changes
              fi
          done
        env:
          CREDENTIALS: ${{ secrets.CREDENTIALS }}  # Get CREDENTIALS from GitHub Secrets

      - name: Commit and push changes
        run: |
          git config --local user.email "${{ secrets.USER_EMAIL }}"
          git config --local user.name "${{ secrets.USER_NAME }}"
          git add ./resources
          git commit -m "Update strings.xml files from Google Sheets"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Required for pushing changes
